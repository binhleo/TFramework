using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
using UnityEditor;
using System.IO;
using System.Text;

namespace AutoBuild
{

    public class BuildScript
    {
        static string[] SCENES = FindEnabledEditorScenes();
        static string APP_NAME = PlayerSettings.productName;
        static string TARGET_DIR = "./_build";
        static string COMPILE_ARGS = null;
        static BuildConfig BUILD_CONFIG;

        //---------------------------------------------------------------------------------------------------------------------------------------//
        // Menu Items
        //---------------------------------------------------------------------------------------------------------------------------------------//

        [MenuItem("TFramework/CI/Build Win32")]
        static void PerformWin32Build()
        {
            CommonUpdate(BuildTargetGroup.Standalone);
            string target_dir = APP_NAME + ".exe";
            GenericBuild(SCENES, TARGET_DIR + "/win/" + target_dir, BuildTarget.StandaloneWindows64, BuildTargetGroup.Standalone, BuildOptions.None);
        }       

        [MenuItem("TFramework/CI/Build Android")]
        static void PerformAndroidBuild()
        {
            CommonUpdate(BuildTargetGroup.Android);

            // Clean Dir
            _DeleteFileOrFolder(TARGET_DIR + "/android");

            // Compute override build name
            PlatformConfig platformConfig = BUILD_CONFIG.Common;
            platformConfig.Merge(BUILD_CONFIG.SelectConfigByPlatform(BuildTargetGroup.Android));

            //Build Mode for Android
            AndroidBuildSystem prevBuildSystem = EditorUserBuildSettings.androidBuildSystem;
            if (platformConfig.androidBuildMode == "gradle")
                EditorUserBuildSettings.androidBuildSystem = AndroidBuildSystem.Gradle;

            string target_dir = APP_NAME.Replace(" ", "") + ".apk";
            target_dir = platformConfig.GetOutputName(target_dir);
            GenericBuild(SCENES, TARGET_DIR + "/android/" + target_dir, BuildTarget.Android, BuildTargetGroup.Android, BuildOptions.None);

            // Revert back
            EditorUserBuildSettings.androidBuildSystem = prevBuildSystem;
        }

        [MenuItem("TFramework/CI/Build Android and Run %&a")]
        static void PerformAndroidBuildAndRun()
        {
            CommonUpdate(BuildTargetGroup.Android);

            // Clean Dir
            _DeleteFileOrFolder(TARGET_DIR + "/android");

            // Compute override build name
            PlatformConfig platformConfig = BUILD_CONFIG.Common;
            platformConfig.Merge(BUILD_CONFIG.SelectConfigByPlatform(BuildTargetGroup.Android));

            //Build Mode for Android
            AndroidBuildSystem prevBuildSystem = EditorUserBuildSettings.androidBuildSystem;
            if (platformConfig.androidBuildMode == "gradle")
                EditorUserBuildSettings.androidBuildSystem = AndroidBuildSystem.Gradle;

            string target_dir = APP_NAME.Replace(" ", "") + ".apk";
            target_dir = platformConfig.GetOutputName(target_dir);
            GenericBuild(SCENES, TARGET_DIR + "/android/" + target_dir, BuildTarget.Android, BuildTargetGroup.Android, BuildOptions.AutoRunPlayer);

            // Revert back
            EditorUserBuildSettings.androidBuildSystem = prevBuildSystem;
        }

        [MenuItem("TFramework/CI/Build iOS")]
        static void PerformIosBuild()
        {
            //CommonUpdate(BuildTargetGroup.iOS);

            //// Clean Dir
            //_DeleteFileOrFolder(TARGET_DIR + "/ios");

            //// Compute override build name
            //PlatformConfig platformConfig = BUILD_CONFIG.Common;
            //platformConfig.Merge(BUILD_CONFIG.SelectConfigByPlatform(BuildTargetGroup.iOS));
            //string target_dir = APP_NAME.Replace(" ", "");
            //target_dir = platformConfig.GetOutputName(target_dir);
            //Environment.SetEnvironmentVariable("LOOP_IOS_NAME", target_dir);

            //GenericBuild(SCENES, TARGET_DIR + "/ios", BuildTarget.iOS, BuildTargetGroup.iOS, BuildOptions.AcceptExternalModificationsToPlayer);
        }

        [MenuItem("TFramework/CI/Signature")]
        static void AutoGenerateSignature()
        {
            FileInfo fileInfo = new FileInfo(Application.dataPath + "/AUTOGENERATED.cs");
            if (fileInfo.Exists)
                fileInfo.Delete();

            using (StreamWriter sw = new StreamWriter(fileInfo.Create()))
            {
                StringBuilder sb = new StringBuilder();

                string signature = Environment.MachineName + ":" + DateTime.Now.ToString().Replace('/', '-');
                string compileFlag = COMPILE_ARGS != null ? COMPILE_ARGS : "";

                string content = "class AUTOGENERATED \n{\n\tpublic static string BUILD_ID = \"{0}\";\n\tpublic static string COMPILE_FLAG = \"{1}\";\n}";
                sb.Append(content);
                sb.Replace("{0}", signature);
                sb.Replace("{1}", compileFlag);                
                sw.Write(sb.ToString());
            }

            AssetDatabase.Refresh(ImportAssetOptions.Default);
        }

        //---------------------------------------------------------------------------------------------------------------------------------------//
        // Build Steps
        //---------------------------------------------------------------------------------------------------------------------------------------//

        static void GenericBuild(string[] scenes, string target_dir, BuildTarget build_target, BuildTargetGroup target_group, BuildOptions build_options)
        {
            // Switch target
            EditorUserBuildSettings.SwitchActiveBuildTarget(target_group, build_target);

            // Update Compile Args
            if (COMPILE_ARGS != null)
            {
                PlayerSettings.SetScriptingDefineSymbolsForGroup(target_group, COMPILE_ARGS);
            }

            // Refresh 
            AssetDatabase.Refresh(ImportAssetOptions.ForceSynchronousImport);
            BuildPipeline.BuildPlayer(scenes, target_dir, build_target, build_options).ToString();

            Debug.Log("[AutoBuild] Autobuild --> DONE");


        }
        static void CommonUpdate(BuildTargetGroup target_group)
        {
            AssetDatabase.Refresh(ImportAssetOptions.ForceSynchronousImport);

            _ParseConfigFile(target_group);

            APP_NAME = PlayerSettings.productName;
            TARGET_DIR = "./_build";

            DeleteUnUsedFile(target_group);

            CopyPlugin(target_group);

            AutoGenerateSignature();
        }

        static void CopyPlugin(BuildTargetGroup target_group)
        {
            PlatformConfig platformConfig = BUILD_CONFIG.Common;
            platformConfig.Merge(BUILD_CONFIG.SelectConfigByPlatform(target_group));

            if (platformConfig.plugins == null)
                return;

            string basePath = Application.dataPath + "/";

            DirectoryInfo source = new DirectoryInfo(basePath + platformConfig.plugins.from);

            DirectoryInfo target = new DirectoryInfo(basePath + platformConfig.plugins.to);

            Debug.Log("[AutoBuild] Copy Plugin: " + source.FullName + " -> " + target.FullName);

            _CopyAll(source, target);

            AssetDatabase.Refresh(ImportAssetOptions.ForceSynchronousImport);
        }

        static void DeleteUnUsedFile(BuildTargetGroup target_group)
        {
            PlatformConfig platformConfig = BUILD_CONFIG.Common;
            platformConfig.Merge(BUILD_CONFIG.SelectConfigByPlatform(target_group));

            if (platformConfig.delete != null)
            {
                foreach (var item in platformConfig.delete)
                {
                    _DeleteFileOrFolder(item);
                    Debug.Log("[AutoBuild] Delete : " + item);
                }
                AssetDatabase.Refresh(ImportAssetOptions.ForceSynchronousImport);
            }
        }

        static void _ParseConfigFile(BuildTargetGroup target_group)
        {
            BUILD_CONFIG = null;

            string autobuildConfigFile = System.Environment.GetEnvironmentVariable("AUTOBUILD_CONFIG_FILE");
            if (autobuildConfigFile == null)
                autobuildConfigFile = "_autobuild_config_release.json";

            Debug.Log("[AutoBuild] Autobuild Config File: " + autobuildConfigFile);

            FileInfo fileInfo = new FileInfo(Application.dataPath + "/" + autobuildConfigFile);
            if (!fileInfo.Exists)
                return;

            using (StreamReader reader = new StreamReader(fileInfo.OpenRead()))
            {
                string content = reader.ReadToEnd();

                Debug.Log("Found Config File With Content: " + content);
                BUILD_CONFIG = JsonUtility.FromJson<AutoBuild.BuildConfig>(content);

                // Override Scenes
                if (BUILD_CONFIG.Scenes != null)
                    SCENES = BUILD_CONFIG.Scenes;

                _UpdateConfig(target_group);
            }
        }

        static void _UpdateConfig(BuildTargetGroup target_group)
        {
            PlatformConfig flatformConfig = BUILD_CONFIG.SelectConfigByPlatform(target_group);

            if (flatformConfig != null)
            {
                // Product Info
                _UpdateProductInfo(flatformConfig);

                // Compile Flag
                _UpdateCompileFlag(flatformConfig);

                // Log
                _UpdateRemoveLog(flatformConfig);

                // Android Keystore
                if (target_group == BuildTargetGroup.Android)
                {
                    _UpdateKeyStore(flatformConfig);                    
                }

                Debug.Log("[AutoBuild] Select Config: " + JsonUtility.ToJson(flatformConfig));
            }
        }

        static void _UpdateRemoveLog(PlatformConfig flatformConfig)
        {
            if (flatformConfig.removeLog == null)
                return;

            PlayerSettings.SetStackTraceLogType(LogType.Exception, StackTraceLogType.Full);
            PlayerSettings.SetStackTraceLogType(LogType.Error, StackTraceLogType.Full);
            PlayerSettings.SetStackTraceLogType(LogType.Assert, StackTraceLogType.Full);

            PlayerSettings.SetStackTraceLogType(LogType.Log, StackTraceLogType.None);
            PlayerSettings.SetStackTraceLogType(LogType.Warning, StackTraceLogType.None);
        }

        static void _UpdateCompileFlag(PlatformConfig flatformConfig)
        {
            string baseComplieFlag = BUILD_CONFIG.Common.compileFlags;
            if (baseComplieFlag == null)
                baseComplieFlag = "";
            if (flatformConfig.compileFlags != null)
                baseComplieFlag += flatformConfig.compileFlags;

            COMPILE_ARGS = baseComplieFlag;
        }
        static void _UpdateProductInfo(PlatformConfig target)
        {
            PlatformConfig platformConfig = BUILD_CONFIG.Common;
            platformConfig.Merge(target);

            if (platformConfig.bundleID != null)
            {
                PlayerSettings.SetApplicationIdentifier(BuildTargetGroup.Android, platformConfig.bundleID);
                PlayerSettings.SetApplicationIdentifier(BuildTargetGroup.iOS, platformConfig.bundleID);
                PlayerSettings.SetApplicationIdentifier(BuildTargetGroup.Standalone, platformConfig.bundleID);
            }

            if (platformConfig.iosSignTeamID != null)
            {
                PlayerSettings.iOS.appleEnableAutomaticSigning = true;
                PlayerSettings.iOS.appleDeveloperTeamID = platformConfig.iosSignTeamID;
            }

            if (platformConfig.version != null)
            {
                PlayerSettings.bundleVersion = platformConfig.version;
                PlayerSettings.iOS.buildNumber = platformConfig.iosVersionCode;
            }

            if (platformConfig.androidVersionCode != null)
                PlayerSettings.Android.bundleVersionCode = int.Parse(platformConfig.androidVersionCode);

            if (platformConfig.productName != null)
                PlayerSettings.productName = platformConfig.productName;

            if (platformConfig.orientation != null)
            {
                if (platformConfig.orientation == "portrait")
                {
                    PlayerSettings.defaultInterfaceOrientation = UIOrientation.AutoRotation;
                    PlayerSettings.allowedAutorotateToLandscapeLeft = false;
                    PlayerSettings.allowedAutorotateToLandscapeRight = false;
                    PlayerSettings.allowedAutorotateToPortrait = true;
                    PlayerSettings.allowedAutorotateToPortraitUpsideDown = true;
                }
                else // landscape by default
                {
                    PlayerSettings.defaultInterfaceOrientation = UIOrientation.AutoRotation;
                    PlayerSettings.allowedAutorotateToLandscapeLeft = true;
                    PlayerSettings.allowedAutorotateToLandscapeRight = true;
                    PlayerSettings.allowedAutorotateToPortrait = false;
                    PlayerSettings.allowedAutorotateToPortraitUpsideDown = false;
                }
            }

            if (platformConfig.targetIosVersion != null)
                PlayerSettings.iOS.targetOSVersionString = platformConfig.targetIosVersion;

            PlayerSettings.Android.androidTVCompatibility = false;
        }
        static void _UpdateKeyStore(PlatformConfig flatformConfig)
        {
            if (flatformConfig == null)
                return;

            if (flatformConfig.keystorePath != null)
            {
                string fullPath = Application.dataPath + "/" + flatformConfig.keystorePath;
                try
                {
                    DirectoryInfo dir = new DirectoryInfo(fullPath);

                    // Gradle required Linux path splash
                    if (flatformConfig.androidBuildMode == "gradle")
                        PlayerSettings.Android.keystoreName = dir.FullName.Replace("\\", "/");
                    else
                        PlayerSettings.Android.keystoreName = dir.FullName;
                }
                catch (Exception ex)
                {
                    UnityEngine.Debug.LogError("Key store not found at" + fullPath + " \n" + ex.StackTrace);
                }
            }

            if (flatformConfig.keystoreAliasName != null)
                PlayerSettings.Android.keyaliasName = flatformConfig.keystoreAliasName;

            if (flatformConfig.keystorePass != null)
                PlayerSettings.Android.keystorePass = flatformConfig.keystorePass;

            if (flatformConfig.keystoreAliasPass != null)
                PlayerSettings.Android.keyaliasPass = flatformConfig.keystoreAliasPass;

        }

        //---------------------------------------------------------------------------------------------------------------------------------------//
        // Utils
        //---------------------------------------------------------------------------------------------------------------------------------------//

        private static string[] FindEnabledEditorScenes()
        {
            List<string> EditorScenes = new List<string>();
            foreach (EditorBuildSettingsScene scene in EditorBuildSettings.scenes)
            {
                if (!scene.enabled) continue;
                EditorScenes.Add(scene.path);
            }
            return EditorScenes.ToArray();
        }

        public static void _CopyAll(DirectoryInfo source, DirectoryInfo target)
        {
            if (source.FullName.ToLower() == target.FullName.ToLower())
            {
                return;
            }

            if (source.FullName.Contains(".svn"))
                return;

            // Check if the target directory exists, if not, create it.
            if (Directory.Exists(target.FullName) == false)
            {
                Directory.CreateDirectory(target.FullName);
            }

            // Copy each file into it's new directory.
            foreach (FileInfo fi in source.GetFiles())
            {
                Console.WriteLine(@"Copying {0}\{1}", target.FullName, fi.Name);
                fi.CopyTo(Path.Combine(target.ToString(), fi.Name), true);
            }

            // Copy each subdirectory using recursion.
            foreach (DirectoryInfo diSourceSubDir in source.GetDirectories())
            {
                DirectoryInfo nextTargetSubDir =
                    target.CreateSubdirectory(diSourceSubDir.Name);
                _CopyAll(diSourceSubDir, nextTargetSubDir);
            }
        }

        static void _DeleteFileOrFolder(string path)
        {
            string tmp = Application.dataPath + "/" + path;
            Debug.Log("[AutoBuild] Delete Begin: " + tmp);

            try
            {
                DirectoryInfo dirInfo = new DirectoryInfo(tmp);
                if (dirInfo.Exists)
                    dirInfo.Delete(true);

                FileInfo fileInfo = new FileInfo(tmp);
                if (fileInfo.Exists)
                    fileInfo.Delete();

                Debug.Log("[AutoBuild] Delete End: " + tmp);
            }
            catch (Exception)
            {

            }
        }

    }
}
